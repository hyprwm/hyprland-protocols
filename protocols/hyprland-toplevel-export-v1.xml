<?xml version="1.0" encoding="UTF-8"?>
<protocol name="hyprland_toplevel_export_v1">
  <copyright>
    Copyright Â© 2022 Vaxry
    All rights reserved.

    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions are met:

    1. Redistributions of source code must retain the above copyright notice, this
       list of conditions and the following disclaimer.

    2. Redistributions in binary form must reproduce the above copyright notice,
       this list of conditions and the following disclaimer in the documentation
       and/or other materials provided with the distribution.

    3. Neither the name of the copyright holder nor the names of its
       contributors may be used to endorse or promote products derived from
       this software without specific prior written permission.

    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
    DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
    FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
    DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
    SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
    CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
    OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
    OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  </copyright>

  <description summary="capturing the contents of toplevel windows">
    This protocol allows clients to ask for exporting another toplevel's
    surface(s) to a buffer.

    Particularly useful for sharing a single window.
  </description>

  <interface name="hyprland_toplevel_export_manager_v1" version="2">
    <description summary="manager to inform clients and begin capturing">
      This object is a manager which offers requests to start capturing from a
      source.
    </description>

    <request name="capture_toplevel">
      <description summary="capture a toplevel">
        Capture the next frame of a toplevel. (window)

        The captured frame will not contain any server-side decorations and will
        ignore the compositor-set geometry, like e.g. rounded corners.

        It will contain all the subsurfaces and popups, however the latter will be clipped
        to the geometry of the base surface.

        The handle parameter refers to the address of the window as seen in `hyprctl clients`.
        For example, for d161e7b0 it would be 3512854448.
      </description>
      <arg name="frame" type="new_id" interface="hyprland_toplevel_export_frame_v1"/>
      <arg name="overlay_cursor" type="int"
        summary="composite cursor onto the frame"/>
      <arg name="handle" type="uint" summary="the handle of the toplevel (window) to be captured"/>
    </request>

    <request name="destroy" type="destructor">
      <description summary="destroy the manager">
        All objects created by the manager will still remain valid, until their
        appropriate destroy request has been called.
      </description>
    </request>

    <!-- Version 2 -->
    <request name="capture_toplevel_with_wlr_toplevel_handle" since="2">
      <description summary="capture a toplevel">
        Same as capture_toplevel, but with a zwlr_foreign_toplevel_handle_v1 handle.
      </description>
      <arg name="frame" type="new_id" interface="hyprland_toplevel_export_frame_v1"/>
      <arg name="overlay_cursor" type="int"
        summary="composite cursor onto the frame"/>
      <arg name="handle" type="object" interface="zwlr_foreign_toplevel_handle_v1" allow-null="false" summary="the zwlr_foreign_toplevel_handle_v1 handle of the toplevel to be captured"/>
    </request>
    <!-- End Version 2 -->
  </interface>

  <interface name="hyprland_toplevel_export_frame_v1" version="2">
    <description summary="a frame ready for copy">
      This object represents a single frame.

      When created, a series of buffer events will be sent, each representing a
      supported buffer type. The "buffer_done" event is sent afterwards to
      indicate that all supported buffer types have been enumerated. The client
      will then be able to send a "copy" request. If the capture is successful,
      the compositor will send a "flags" followed by a "ready" event.

      wl_shm buffers are always supported, ie. the "buffer" event is guaranteed to be sent.

      If the capture failed, the "failed" event is sent. This can happen anytime
      before the "ready" event.

      Once either a "ready" or a "failed" event is received, the client should
      destroy the frame.
    </description>

    <event name="buffer">
      <description summary="wl_shm buffer information">
        Provides information about wl_shm buffer parameters that need to be
        used for this frame. This event is sent once after the frame is created
        if wl_shm buffers are supported.
      </description>
      <arg name="format" type="uint" enum="wl_shm.format" summary="buffer format"/>
      <arg name="width" type="uint" summary="buffer width"/>
      <arg name="height" type="uint" summary="buffer height"/>
      <arg name="stride" type="uint" summary="buffer stride"/>
    </event>

    <request name="copy">
      <description summary="copy the frame">
        Copy the frame to the supplied buffer. The buffer must have the
        correct size, see hyprland_toplevel_export_frame_v1.buffer and
        hyprland_toplevel_export_frame_v1.linux_dmabuf. The buffer needs to have a
        supported format.

        If the frame is successfully copied, a "flags" and a "ready" event is
        sent. Otherwise, a "failed" event is sent.

        This event will wait for appropriate damage to be copied, unless the ignore_damage
        arg is set to a non-zero value.
      </description>
      <arg name="buffer" type="object" interface="wl_buffer"/>
      <arg name="ignore_damage" type="int"/>
    </request>

    <event name="damage">
      <description summary="carries the coordinates of the damaged region">
        This event is sent right before the ready event when ignore_damage was
        not set. It may be generated multiple times for each copy
        request.

        The arguments describe a box around an area that has changed since the
        last copy request that was derived from the current screencopy manager
        instance.

        The union of all regions received between the call to copy
        and a ready event is the total damage since the prior ready event.
      </description>
      <arg name="x" type="uint" summary="damaged x coordinates"/>
      <arg name="y" type="uint" summary="damaged y coordinates"/>
      <arg name="width" type="uint" summary="current width"/>
      <arg name="height" type="uint" summary="current height"/>
    </event>

    <enum name="error">
      <entry name="already_used" value="0"
        summary="the object has already been used to copy a wl_buffer"/>
      <entry name="invalid_buffer" value="1"
        summary="buffer attributes are invalid"/>
    </enum>

    <enum name="flags" bitfield="true">
      <entry name="y_invert" value="1" summary="contents are y-inverted"/>
    </enum>

    <event name="flags">
      <description summary="frame flags">
        Provides flags about the frame. This event is sent once before the
        "ready" event.
      </description>
      <arg name="flags" type="uint" enum="flags" summary="frame flags"/>
    </event>

    <event name="ready">
      <description summary="indicates frame is available for reading">
        Called as soon as the frame is copied, indicating it is available
        for reading. This event includes the time at which presentation happened
        at.

        The timestamp is expressed as tv_sec_hi, tv_sec_lo, tv_nsec triples,
        each component being an unsigned 32-bit value. Whole seconds are in
        tv_sec which is a 64-bit value combined from tv_sec_hi and tv_sec_lo,
        and the additional fractional part in tv_nsec as nanoseconds. Hence,
        for valid timestamps tv_nsec must be in [0, 999999999]. The seconds part
        may have an arbitrary offset at start.

        After receiving this event, the client should destroy the object.
      </description>
      <arg name="tv_sec_hi" type="uint"
           summary="high 32 bits of the seconds part of the timestamp"/>
      <arg name="tv_sec_lo" type="uint"
           summary="low 32 bits of the seconds part of the timestamp"/>
      <arg name="tv_nsec" type="uint"
           summary="nanoseconds part of the timestamp"/>
    </event>

    <event name="failed">
      <description summary="frame copy failed">
        This event indicates that the attempted frame copy has failed.

        After receiving this event, the client should destroy the object.
      </description>
    </event>

    <request name="destroy" type="destructor">
      <description summary="delete this object, used or not">
        Destroys the frame. This request can be sent at any time by the client.
      </description>
    </request>

    <event name="linux_dmabuf">
      <description summary="linux-dmabuf buffer information">
        Provides information about linux-dmabuf buffer parameters that need to
        be used for this frame. This event is sent once after the frame is
        created if linux-dmabuf buffers are supported.
      </description>
      <arg name="format" type="uint" summary="fourcc pixel format"/>
      <arg name="width" type="uint" summary="buffer width"/>
      <arg name="height" type="uint" summary="buffer height"/>
    </event>

    <event name="buffer_done">
      <description summary="all buffer types reported">
        This event is sent once after all buffer events have been sent.

        The client should proceed to create a buffer of one of the supported
        types, and send a "copy" request.
      </description>
    </event>
  </interface>
</protocol>
